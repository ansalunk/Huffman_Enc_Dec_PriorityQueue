package com.huffmann;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.HashMap;
import java.util.Map;

import com.datastructure.TreeNode;
import com.decode.Unpack;

public class HuffmanDecode {

	static Unpack unpack;

	public static void main(String[] args) throws IOException {
		
	/*	unpack = new Unpack();
		
		Encoded file
		ArrayList<Byte> packed = new ArrayList<Byte>();
	      StringBuilder codeBuilder = new StringBuilder();
	      InputStream fis1 = new FileInputStream(new File(args[0]));
			 
			 BufferedReader reader1 = new BufferedReader(new InputStreamReader(fis1));

	      int b = reader1.read();
	      while(b>=0){
	         packed.add((byte)b);
	         b = reader1.read();
	      }
	      unpack.unpack(codeBuilder,packed);
	      
	      System.out.print(codeBuilder);
	      */
		
		ObjectInputStream ois = new ObjectInputStream(new FileInputStream(args[0]));
		File decodedFile = new File("decoded.txt");
    	PrintWriter pw = new PrintWriter(new FileWriter(decodedFile));
        final BitSet bitSet = (BitSet) ois.readObject();
        for (int i = 0; i < (bitSet.length() - 1);) {
            TreeNode temp = root;
            // since huffman code generates full binary tree, temp.right is certainly null if temp.left is null.
            while (temp.left!= null && temp.right!=null) {
                if (!bitSet.get(i)) {
                    temp = temp.left;
                } else {
                    temp = temp.right;
                }
                i = i + 1;
           }
            if(temp!=null)
            	pw.print(temp.value+"\n");
            	
        }
        pw.flush();
        pw.close();
        ois.close();
		
		
	      /*Code Table */
	      InputStream fis2 = new FileInputStream(new File(args[1]));
			 
			 BufferedReader reader2 = new BufferedReader(new InputStreamReader(fis2));
		        StringBuilder out = new StringBuilder();
		        String line;
		        String[] input;
		        
		        Map<Integer, String> codeMap = new HashMap<Integer, String>();
		        while ((line = reader2.readLine()) != null) {
		        	input = line.split(" ");
		        	int key = Integer.parseInt(input[0]);
		        	String code = input[1];
		            codeMap.put(key, code);
		             }
			TreeNode root = unpack.buildDecodeTree(codeMap);
			unpack.printTree(root);
			
			
			unpack.generateDecodedFile(codeBuilder, root);
	    		
	}
}
