package com.huffmann;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;

import com.datastructure.BinaryHeap;
import com.datastructure.FourWayHeap;
import com.datastructure.PairNode;
import com.datastructure.PairingHeap;
import com.datastructure.TreeNode;
import com.encode.PackToBinary;

public class HuffmanCode {

	TreeNode root;
	static Map<Integer, String> codeMap = new HashMap<Integer, String>();

	static Map<Integer, Integer> freqMap;
	static BinaryHeap bheap;
	static FourWayHeap fourWayHeap;
	static PairingHeap pairHeap;
	static ArrayList<Integer> input;
	static PackToBinary packMessage;

	/*
	 * This is the constructor for HuffmanCode. It needs to 1. Build the Huffman
	 * tree. 2. Generate the code table from the tOree.
	 */
	public static String encode(ArrayList<Integer> input) {
		// TODO: Write me!

		final StringBuilder stringBuilder = new StringBuilder();

		for (int i = 0; i < input.size(); i++) {

			if (codeMap.containsKey(input.get(i))) {
				stringBuilder.append(codeMap.get(input.get(i)));
			}
		}
		return stringBuilder.toString();

	}

	/*
	 * The main method in this class : 1. reads in input text file 2. builds a
	 * frequency map 3. builds a HuffmanCode from the map.
	 * 
	 * The input is read from a file specified on the command line.
	 * 
	 * The output of the program 1. The time to generate the Huffman Tree 2.
	 * Generate a CodeTable.txt File
	 */
	public static void main(String[] args) throws Exception {

		freqMap = new HashMap<Integer, Integer>();
		input = new ArrayList<Integer>();
		packMessage = new PackToBinary();

		@SuppressWarnings("resource")
		Scanner scanner = new Scanner(new File(args[0]));

		int totalAmountOfNumbers = 0;

		while (scanner.hasNext())

		{

			int currentNumber = scanner.nextInt();
			input.add(currentNumber);
			Integer count = freqMap.get(currentNumber);
			if (count == null)
				freqMap.put(currentNumber, 1);
			else
				freqMap.put(currentNumber, count + 1);

			totalAmountOfNumbers++;
		}

		System.out
				.println(totalAmountOfNumbers + " map size " + freqMap.size());

		
		
		

		buildTrees(freqMap);
				
		generateBinaryTree();
		generateCode(bheap.findMin(), "");

				//generateFourWayTree();
				//packMessage.generateCodeTable(codeMap);
				// generateFourWayTree();
				//String encodedMessage= encode(input);
				// generatePairingTree();
		// buildHeap(freqMap);
		// buildFourWayHeap(freqMap);
		// System.out.println(encodedMessage + " length : " +
		 //encodedMessage.length();

		 //packMessage.encodeToBinary(encodedMessage);

		scanner.close();
	}

	/**
	 * Generates huffman codes for all elements in the file.
	 * 
	 * @param node
	 *            root of Huffman tree
	 * @param code
	 *            give empty string to calculate proper code
	 */
	private static void generateCode(TreeNode node, String code) {
		if (node.left == null && node.right == null) {
			codeMap.put(node.getNode(), code);
			return;
		}
		generateCode(node.left, code + '0');
		generateCode(node.right, code + '1');
	}

	/**
	 * Huffman Algorithm
	 * 
	 * @param heap
	 *            minimum heap
	 * @return huffman tree
	 */
	private static BinaryHeap buildBinaryTree(BinaryHeap heap) {
		int n = heap.getHeapSize();
		for (int i = 0; i < (n - 1); ++i) {
			TreeNode z = new TreeNode();
			z.setLeft(heap.deleteMin());
			z.setRight(heap.deleteMin());
			z.setFreq((int) (z.getLeft().getFreq() + z.getRight().getFreq()));
			heap.insert(z);
			// heap.printHeap();
		}
		return heap;
	}

	/**
	 * Huffman Algorithm
	 * 
	 * @param heap
	 *            minimum heap
	 * @return huffman tree
	 */
	private static FourWayHeap buildFourWayTree(FourWayHeap heap) {
		int n = heap.getHeapSize();
		for (int i = 3; i < (n - 1); ++i) {
			TreeNode z = new TreeNode();
			z.setLeft(heap.deleteMin());
			z.setRight(heap.deleteMin());
			z.setFreq((int) (z.getLeft().getFreq() + z.getRight().getFreq()));
			heap.insert(z);
		}
		return heap;
	}

	private static PairingHeap buildPairingTree(PairingHeap pairHeap)
			throws Exception {
		pairHeap.huff();
		return pairHeap;
	}

	private static void generateBinaryTree() {
		buildBinaryHeap(freqMap);
		bheap = buildBinaryTree(bheap);
	}

	private static void generateFourWayTree() {
		buildFourWayHeap(freqMap);
		fourWayHeap = buildFourWayTree(fourWayHeap);

	}

	private static void generatePairingTree() throws Exception {
		// System.out.println("Creating heap");
		buildPairingHeap(freqMap);
		// System.out.println("Creating prefix tree");
		pairHeap = buildPairingTree(pairHeap);

		// pairHeap.printHeap(pairHeap);

	}

	private static void buildBinaryHeap(Map<Integer, Integer> freqMap) {

		bheap = new BinaryHeap();

		for (Entry<Integer, Integer> entry : freqMap.entrySet()) {
			Integer key = entry.getKey();
			Integer value = entry.getValue();
			TreeNode node = new TreeNode(key, value);
			bheap.insert(node);
		}

	}

	private static void buildFourWayHeap(Map<Integer, Integer> freqMap) {
		fourWayHeap = new FourWayHeap();

		for (Entry<Integer, Integer> entry : freqMap.entrySet()) {
			Integer key = entry.getKey();
			Integer value = entry.getValue();
			TreeNode node = new TreeNode(key, value);
			fourWayHeap.insert(node);
		}

	}

	private static void buildPairingHeap(Map<Integer, Integer> freqMap) {
		pairHeap = new PairingHeap();

		for (Entry<Integer, Integer> entry : freqMap.entrySet()) {
			Integer key = entry.getKey();
			Integer value = entry.getValue();
			PairNode node = new PairNode(key, value);
			pairHeap.insert(node);
		}

	}

	private static void buildTrees(Map<Integer, Integer> map) throws Exception {

		/*
		 * Time to execute the method using 4Way Heap
		 */

		long startTime = System.nanoTime();
		for (int i = 0; i < 10; i++) { // run 10 times on given data set

			generateFourWayTree();
		}

		long elapsedTime = ((System.nanoTime() - startTime) / 10);

		System.out.println("Time using 4way heap " + elapsedTime);
		double seconds = (double) elapsedTime / 1000.0;

		System.out.println("which is " + (int) seconds + " microseconds");

		/*
		 * Time to execute the method using Binary Heap
		 */
		startTime = System.nanoTime();

		for (int i = 0; i < 10; i++) { // run 10 times on given data set

			generateBinaryTree();
		}

		elapsedTime = ((System.nanoTime() - startTime) / 10);

		System.out.println("Time using binary heap " + elapsedTime);
		seconds = (double) elapsedTime / 1000.0;

		System.out.println("which is " + (int) seconds + " microseconds");

		// Time to execute the method using Pairing Heap

		startTime = System.nanoTime();
		for (int i = 0; i < 10; i++) { // run 10 times on * given data set

			generatePairingTree();
		}

		elapsedTime = ((System.nanoTime() - startTime) / 10);

		System.out.println("Time using pairing heap " + elapsedTime);
		seconds = (double) elapsedTime / 1000.0;

		System.out.println("which is " + (int) seconds + " microseconds");

	}

}
