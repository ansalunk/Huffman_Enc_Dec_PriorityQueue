package com.decode;

import java.util.ArrayList;
import java.util.Map;
import java.util.Map.Entry;

import com.datastructure.TreeNode;

public class UnpackFromBinary {

	TreeNode root, temp;

	public TreeNode buildDecodeTree(Map<Integer, String> codeMap) {

		root = new TreeNode();

		for (Entry<Integer, String> node : codeMap.entrySet()) {

			int key = node.getKey();
			String code = node.getValue();
			char[] codeChar = code.toCharArray();
			temp = root;

			for (int count = 0; count < codeChar.length; count++) {

				temp = insertNode(codeChar[count],
						count == (codeChar.length - 1), temp, key);

			}

		}

		return root;
	}

	public void printTree(TreeNode root) {

		if (root != null)
			System.out.println(root.getNode());
		if (root.left != null)
			printTree(root.left);
		if (root.right != null)
			printTree(root.right);

	}

	private TreeNode insertNode(char c, boolean isLeafNode, TreeNode temp,
			int key) {

		TreeNode newNode = new TreeNode();

		if (isLeafNode) {
			if (c == '0') {
				temp.left = newNode;
			} else {
				temp.right = newNode;
			}
			newNode.setNode(key);
		}

		else {
			if (c == '0') {
				if (temp.left != null)
					temp = temp.left;
				else {
					temp.left = newNode;
					temp = temp.left;
				}
			} else {
				if (temp.right != null)
					temp = temp.right;
				else {
					temp.right = newNode;
					temp = temp.right;
				}
			}
		}

		return temp;
	}

	public StringBuilder unpack(StringBuilder b, ArrayList<Byte> arr) {
		int n = arr.get(0);
		int len = 8 * arr.size() - 16 + (n == 0 ? 8 : n);

		for (int i = 0; i < len; i++) {
			int index = i / 8 + 1;
			int bitpos = i % 8;
			int bit = (arr.get(index) >> (7 - bitpos)) & 1;
			b.append(bit == 0 ? '0' : '1');
		}
		
		return b;
	}

	public void generateDecodedFile(StringBuilder codeBuilder, TreeNode root) {

		String binaryString = codeBuilder.toString();

		System.out.println(binaryString);

		StringBuilder sb = new StringBuilder();
		TreeNode c = root;
		for (int i = 0; i < binaryString.length(); i++) {
			c = binaryString.charAt(i) == '1' ? c.right : c.left;
			if (c.left == null && c.right == null) {
				sb.append(c.getNode() + " ");
				c = root;
			}
		}
		System.out.print(sb);

	}
}
